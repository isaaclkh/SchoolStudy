#lang plai

(define (run sexp)
  (interp (parse sexp) (mtSub)))

(define-type RLFAE
  [num (n number?)]
  [add (lhs RLFAE?)(rhs RLFAE?)]
  [sub (lhs RLFAE?)(rhs RLFAE?)]
  [mul (lhs RLFAE?)(rhs RLFAE?)]
  [id (name symbol?)]
  [fun (param symbol?)(body RLFAE?)]
  [app (ftn RLFAE?)(arg RLFAE?)]
  
  [eql (l RLFAE?)(r RLFAE?)]
  [ifexp (expr RLFAE?)(then RLFAE?)(else RLFAE?)]
  [orop (l RLFAE?)(r RLFAE?)]
  )

(define (parse sexp)
  (match sexp
    [(? number?)(num sexp)]
    [(list '+ l r)(add (parse l)(parse r))]
    [(list '- l r)(sub (parse l)(parse r))]
    [(list '* l r)(mul (parse l)(parse r))]
    
    [(list 'with (list i v) e) (app (fun i (parse e)) (parse v))]
    [(? symbol?)(id sexp)]
    [(list 'fun (list p) b)(fun p (parse b))]
    [(list f a)(app (parse f)(parse a))]

    [(list '= l r)(eql (parse l)(parse r))]
    
    [(list 'if expr then else) (ifexp (parse expr) (parse then) (parse else))]
    [(list 'or l r) (orop (parse l) (parse r))]
    [else (error 'parse "bad syntax : ~a" sexp)]
    ))

(define-type DefrdSub
  [mtSub]
  [aSub (name symbol?)(value RLFAE-Value?)(ds DefrdSub?)]
  [aRecSub (name symbol?)
           (vlaue-box (box/c RLFAE-Value?))
           (ds DefrdSub?)])

(define-type RLFAE-Value
  [numV (n number?)]
  [closureV (param symbol?)
            (body RLFAE?)
            (ds DefrdSub?)]
  [exprV (expr RLFAE?)(ds DefrdSub?)
         (value (box/c (or/c false RLFAE-Value?)))])

(define (strict v)
  (type-case RLFAE-Value v
    [exprV (expr ds v-box)
           (if (not (unbox v-box))
               (local [(define v (strict (interp expr ds)))]
                 (begin (set-box! v-box v) v))
           (unbox v-box))]
    [else v]))

(define (num-op op)
  (lambda (x y)(numV (op (numV-n (strict x))(numV-n (strict y))))))

(define num+ (num-op +))
(define num- (num-op -))
(define num* (num-op *))

(define (eqll x y)
  (eq? (numV-n (strict x))(numV-n (strict y))))

(define (lookup name ds)
  (type-case DefrdSub ds
    [mtSub() (error 'lookup "free identifier")]
    [aSub (i v saved)(if (symbol=? i name)
                         v (lookup name saved))]
    [aRecSub (sub-name val-box rest-ds)
             (if (symbol=? sub-name name)
                 (unbox val-box)
                 (lookup name rest-ds))]))

(define (interp rlfae ds)
  (type-case RLFAE rlfae
    [num (n) (numV n)]
    [add (l r) (num+ (interp l ds)(interp r ds))]
    [sub (l r) (num- (interp l ds)(interp r ds))]
    [mul (l r) (num* (interp l ds)(interp r ds))]
    [id (name) (lookup name ds)]
    [fun (param body-expr)(closureV param body-expr ds)]
    [app (f a) (local [(define f-val (strict (interp f ds)))
                       (define a-val (exprV a ds (box #f)))]
                 (interp (closureV-body f-val)
                         (aSub (closureV-param f-val)
                               a-val
                               (closureV-ds f-val))))]
    [eql (l r) (eqll (interp l ds)(interp r ds))]
    [ifexp (test-expr then-expr else-expr)
           (if (interp test-expr ds)
           (interp then-expr ds)
           (interp else-expr ds))]
    [orop (l r) (or (interp l ds) (interp r ds))]
    ))